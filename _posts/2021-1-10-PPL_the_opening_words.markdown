---
layout: post
title: Principles of Programming Languages
date: 2021-1-10 16:37:05 +0900
category: PPL
---

教授：翁恺 浙江大学
参考书：编程语言原理（第10版） 清华大学出版社

|                    |            |  **标准**  |            |
| :----------------: | :--------: | :--------: | :--------: |
|      **特性**      | **可读性** | **可写性** | **可靠性** |
|     **简单性**     |   **√**    |   **√**    |   **√**    |
|     **正交性**     |   **√**    |   **√**    |   **√**    |
|    **数据类型**    |   **√**    |   **√**    |   **√**    |
|    **语法设计**    |   **√**    |   **√**    |   **√**    |
|  **对抽象的支持**  |            |   **√**    |   **√**    |
|      **表达**      |            |   **√**    |   **√**    |
|    **类型检查**    |            |            |   **√**    |
|    **异常处理**    |            |            |   **√**    |
| **有限地使用别名** |            |            |     √      |



## 可读性

​		判断程序设计语言的最重要标准之一就是写出的程序是否便于阅读和理解。

* ### 影响程序设计语言可读性的特性

  * #### 整体简单性

    程序设计语言的整体简单性极大地影响着它的可读性。有大量基本结构的语言比结构少的语言学起来更难。必须使用大规模语言的程序员，通常只学该语言的一个子集，而忽略语言的其他特性。这种学习模式有时用来解释为什么设计那么多语言结构，但这种说法没有道理，只要编写程序的人所学的子集与读程序的人所熟悉的子集不一样，就会出现可读性问题。

    程序设计语言的第二个复杂性是特性多样性，即能够用不止一种方法来实现特定操作。

    第三个潜在的问题是运算符重载，即一个运算符有多种意义。

  * #### 正交性

    程序设计语言的正交性意味着相对较小的基本结构集合，能够以较少的组合方式来构成语言的控制结构和数据结构。而且，基本结构的任一种可能组合都是合法且有意义的。

    一个语言特性是正交的，意味着它独立于程序中出现位置的上下文。正交性来源于基本结构间的对称关系。

    用IBM大型机和VAX系列微型计算机的汇编语言的一个方面来说明正交性在设计原理上的应用。考虑一个简单的情形：将两个内存或寄存器中的32位整数值相加，所得的和替换其中的一个值。

    IBM大型机用两条指令来实现这一操作，如：

    ```c
    A  Reg1, memory_cell
    AR Reg1, Reg2					
    /* Reg1和Reg2代表寄存器。指令的语义是：
    		Reg1 <- contents(Reg1) + contents(memory_cell)
    		Reg1 <- contents(Reg1) + contents(Reg2)	*/
    ```

    在VAX中，32位整数值的加法指令是

    ```c
    ADDL operand_1, operand_2
    /* 其语义是 operand_2 <- contents(operand_1) + contents(operand_2)
    	其中，任一操作数都可以是寄存器或存储单元 */
    ```

    **VAX的指令设计是正交的，因为一条指令既可以使用寄存器，也可以使用存储单元作为操作数。**

  * #### 数据类型

    在语言中是否有适当的方式来定义数据类型和数据结构，是另一个有助于可读性的重要因素。比如语言中是否包含布尔类型。

  * #### 语法设计

    特殊字

    

## 可写性

​		可写性是衡量在制定问题领域内用语言创建程序有多容易的一个标准。

* ### 影响语言可写性的一些非常重要的特性

  * #### 简单性和正交性

    较少的结构可以提高可写性。

    过多的正交有损于可写性。当几乎任何基本结构的组合都合理时，程序中的错误会难以检测。

  * #### 对抽象的支持

    抽象解释以允许忽略许多细节的方式来定义和使用复杂结构和操作的能力。

  * #### 表达性

    表达性意味着有若干功能强大的运算符，能够用很短的程序实现大量的运算。



## 可靠性

​		如果程序在任何情况下都能按设计的那样执行，就称该程序是可靠的。

* ### 影响程序可靠性的一些非常重要的特性

  * #### 类型检查

    类型检查是指对所给程序中的类型错误进行简单的检测，可以用编译器来做，也可以在程序运行时做。

  * #### 异常处理

    程序来接运行时错误、采取更正措施，再继续运行的能力显然有助于提高程序的可靠性。

  * #### 别名

    别名的定义不太严格，它表示使用两个或多个的名称都可以访问同一个内存单元。

  * #### 可读性和可写性

    可读性和可写性都会影响可靠性。



## 成本

​		第一，培训程序员使用语言是有成本的。

​		第二，用语言编写程序是有成本的。

​		第三，编译程序是有成本的。

​		第四，执行用语言编写的程序的成本受到该语言设计的显著影响。
