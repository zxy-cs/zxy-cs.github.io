---
layout: post
title: The opening words
date: 2020-12-16 22:57:05 +0900
category: Java
---
Java的关键术语

* 简单性
  * Java语法事C++语法的一个“纯净”版本。这里没有头文件、指针运算（甚至指针语法）、结构、联合、操作符重载、虚基类等。然而，设计者并没有试图清除C++中所有不适当的特性。例如switch语句的语法在Java中就没有改变。

* 面向对象
  * 简单地讲，面向对象设计是一种程序设计技术。它将重点放在数据（即对象）和对象的接口上。用木匠打一个比方，一个”面向对象的“木匠始终关注的事所制作的椅子，第二位才是所使用的工具；一个“非面向对象的”木匠首先考虑的是所用的工具。在本质上，Java的面向对象能力与C++是一样的。
  * Java与C++主要不同点在于多重继承，在Java中，取而代之的是更简单的接口概念。与C++相比，Java提供了更丰富的运行时自省功能。

* 分布式
  * Java有一个丰富的例程库，用于处理像HTTP和FTP之类的TCP/IP协议。Java应用程序能够通过URL打开和访问网络上的对象，其便捷程度就好像访问本地文件一样。

* 健壮性
  * Java设计的目的之一在于使得Java编写的程序具有多方面的可靠性。Java和C++最大的不同在于Java采用的指针模型可以消除重写内存和损坏数据的可能性。
  * Java编译器能够检测出许多其他语言中仅在运行时才能检测出来的问题。

* 安全性
  * Java适用于网络/分布式环境。为了达到这个目标，在安全方面投入了很大的精力。使用Java可以构建防病毒、防篡改的系统。
  * 从一开始，Java就设计成能够防范各种攻击，其中包括：
    * 运行时堆栈溢出。如蠕虫和病毒常用的攻击手段。
    * 破坏自己的进程空间之外的内存。
    * 未经授权读写文件。

* 体系结构中立
  * 编译器生成一个体系结构中立的目标文件格式，这是一种编译后的代码，只要有Java运行时系统，这些编译后的代码可以在许多处理器上运行。Java编译器通过生成与特定的计算机体系结构无关的字节码指令来实现这一特性。精心设计的字节码不仅可以很容易地在任何机器上解释执行，而且还可以动态地翻译成本地机器代码。

* 可移植性
  * 与C和C++不同，Java规范中没有“依赖具体实现“的地方。基本数据结构的大小和有关计算都做了明确的说明。在Java中，数据类型具有固定的大小，这消除了代码移植时令人头痛的主要问题。二进制数据以固定的格式进行存储和传输，消除了字节顺序的困扰。字符串使用标准的Unicode格式存储的。

* 解释型
  * Java解释器可以在任何移植了解释器的机器上执行Java字节码。由于链接是一个增量式且轻量级的过程，所以，开发过程也变得更加快捷，更加具有探索性。

* 高性能
  * 尽管对解释后的字节码性能已经比较满意，但在有些场合下还需要更加高效的性能。字节码可以（在运行时刻）动态地翻译成对应运行这个应用的特定CPU的机器码。

* 多线程
  * 多线程可以带来更好的交互相应和实施行为。

* 动态性
  * 从各种角度看，Java与C或C++相比更加具有动态性。它能够适应不断发展的环境。库中可以自由地添加新方法和实例变量，而对客户端却没有任何影响。在Java中找出运行类型信息十分简单。
